c
self.skills_accuracy * (total-1) + new_incoming_accuracy
self.skills_accuracy * (total-1)
self.skills_accuracy
self
skills_accuracy
n
c
n
total
n
c
t
t.append("1")
t.append
t = []
req_skill_spans[0].text
req_skill_spans[0].value
req_skill_spans[0]
req_skill_spans.first
req_skill_spans
req_skill_spans = fragment.search("span.required_skill")
req_skill_spans
opt_skill_spans.first
opt_skill_spans = fragment.search("span.optional_skill")
fragment.search("span.required_skill")opt_skill_spans = fragment.search("span.optional_skill")
fragment.search("span.required_skill").length
fragment.search("span.required_skill")
fragment.search("span .required_skill")
fragment.search("span")
fragment = Nokogiri::HTML.fragment(annotated_description)
q
annotated_description
c
annotated_description
c
q
c
q
@currentJobID.to_i
c
@currentJobID.to_i
;2C@currentJobID.to_i
currentUser.get_skills_progress
c
skillsets
skillsets.last.job_id + 1
skillsets.last.job_id
n
c
currentUser.skills_progress
currentUser
c
currentUser.skillsets.length
currentUser.skillsets
@currentJobID.to_i
currentUser.progress
c
currentUser.progress == @currentJobID.to_i
currentUser.progress
@currentJobID
c
currentUser
c
1c
c
currentUser
currentUser.skillsets[0]
currentUser.skillsets[1]
currentUser.skillsets[2]
currentUser.skillsets[3]
currentUser.skillsets
Skillset.find_by(user: currentUser)
Skillset.find_by(job_id: job_id, user: currentUser)
@user_annotation
n
Skillset.find_by(job_id: job_id, is_gold: true)
n
c
job_id
@gold_annotation
n
c
new_annotated_skill.annotated_job_description
new_annotated_skill
currentUser
n
quit
quit()
line.length
line
c
currentUser
n
Skill.last
Skill.all
currentUser
 c
params
c
q
User.find_by_email("temp70@temp.com")
User.find_by_email("temp63@temp.com")
User.find_by_email("temp80@temp.com")
User.find_by_email("temp65@temp.com")
newUser.errors
newUser
c
User.last
lastUser
c
q
User.find_by_email("temp58@temp.com")
User.find_by_email("temp57@temp.com")
newUser.errors
User.last
newUser
n
User.all.length
User.length
User.last
User.las
ii
quit
User.last
newUser.errors
newUser
User.last
quit
User.last
newUser.errors
c
q
c
mongo_id
posting
q
mongo_id["$oid"]
mongo_id
posting.mongo_id
posting_mongo_id
n
posting
q
c
Job.where(is_description_annotated: true).length
Job.where(is_description_annotated: true)
Job
posting[0].description
posting[1].description
posting[1]
posting[0]
posting
c
posting
posting.delete_all
c
posting.delete_all
c
posting.delete_all
c
posting.delete_all
c
posting.delete_all
c
posting.delete_all
c
posting.delete_all
posting
c
posting[1].delete
posting[0].delete
posting.delete
posting.length
posting
quit
c
posting[5].delete
posting[4].delete
posting[5]
posting[4]
posting[3]
posting[5]
posting[1]
posting[0]
posting
c
posting[0].delete
c
posting[0].delete
posting
c
posting[1].delete
posting[0].delete
c
posting[1].delete
posting[0].delete
c
posting[1].delete
posting[0].delete
c
posting[1].delete
posting[0].delete
posting.length
posting
c
posting[1].delete
posting[0].delete
posting[2].annotations.length
posting[1].annotations.length
posting[0].annotations.length
posting[0].annotations
posting.length
posting
quit
quit()
Job.where(title: job_title, company_name: company_name).length
Job.where(title: job_title, company_name: company_name)
posting[1]
posting[0]
posting[0].save
posting[0]
posting[1]
posting[1].mongo_id
posting[0].mongo_id
posting
posting[0].annotations.length
posting
posting[1].annotations
posting[1].annotations.length
posting[0].annotations.length
posting[0].annotations
posting[1]
posting[0]
posting
quit
y
q
posting.length
posting
c
bestCandidateScore
bestCandidate
bestCandidate.annotations.length
bestCandidate.annotations
bestCandidate
bestCandidateScore
q
c
sim
n
annotation2.optional_skills
annotation1.optional_skills
sim
n
annotation1.skills
